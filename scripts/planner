#!/usr/bin/env python3

import math
import fields2cover as f2c
import click

from romea_path_tools.path_planning_utils import discretize_swaths
from romea_path_tools.path import Path
import romea_path_tools.kml as kml


class PathGenerator:
    def __init__(self, robot_width, operation_width, min_radius):
        self.cell = None
        self.swaths = None
        self.path = None
        self.polygon = None

        self.robot = f2c.Robot(robot_width, operation_width)
        self.robot.setMinTurningRadius(min_radius)
        self.robot.setCruiseVel(1.0)
        # self.robot.linear_curv_change = 0.4  # 1/m^2
        self.step_size = 0.1  # m

    def load_kml(self, filename):
        self.polygon = kml.parse_polygon(filename)
        print(f"polygon: {self.polygon}")
        linear_ring = f2c.LinearRing()
        for point in self.polygon.points:
            linear_ring.addGeometry(f2c.Point(*point))

        self.cell = f2c.Cell(linear_ring)

    def generate_swaths(self):
        bf = f2c.SG_BruteForce()
        # swaths = bf.generateSwaths(2.34, self.robot.op_width, self.cell)
        # swaths = bf.generateBestSwaths(f2c.OBJ_NSwath(), self.robot.op_width, self.cell)

        # compute angle from first segment
        a = self.polygon.points[4]
        b = self.polygon.points[3]
        angle = math.atan2(b[1] - a[1], b[0] - a[0])
        swaths = bf.generateSwaths(angle, self.robot.getCovWidth(), self.cell)

        # self.swaths = f2c.RP_Snake().genSortedSwaths(swaths)
        self.swaths = f2c.RP_Boustrophedon().genSortedSwaths(swaths, 0)
        # self.swaths = f2c.RP_Spiral().genSortedSwaths(swaths)

    def path_planning(self):
        path_planner = f2c.PP_PathPlanning()

        # turning = f2c.PP_DubinsCurves()
        turning = f2c.PP_DubinsCurvesCC()
        # turning = f2c.PP_ReedsSheppCurves()
        # turning = f2c.PP_ReedsSheppCurvesHC()

        turning.discretization = self.step_size
        self.path = path_planner.planPath(self.robot, self.swaths, turning)

        # fix: Add missing last point manually
        last_state = f2c.PathState()
        last_state.point = self.swaths.back().endPoint()
        self.path.addState(last_state)

        self.path = discretize_swaths(self.path, self.step_size)
        # self.path.discretizeSwath(self.step_size)

    def visualize(self):
        f2c.Visualizer.figure()
        f2c.Visualizer.plot(self.cell)
        f2c.Visualizer.plot(self.path)
        # f2c.Visualizer.plot(self.swaths)
        f2c.Visualizer.axis_equal()
        f2c.Visualizer.show()

    def export_path(self, filename):
        tiara_path = Path()
        tiara_path.columns = ["x", "y", "speed"]

        origin = self.polygon.origin
        tiara_path.anchor = [origin[1], origin[0], origin[2]]

        TURN = f2c.PathSectionType_TURN
        SWATH = f2c.PathSectionType_SWATH
        previous_dir = None
        previous_type = TURN

        for i, state in enumerate(self.path.getStates()):
            if previous_dir != state.dir:
                tiara_path.append_section([])

            if previous_type == SWATH and state.type == TURN:
                if i > 0:
                    tiara_path.append_annotation("zone_exit", "work", i - 1)
                tiara_path.append_annotation("zone_enter", "uturn", i)

            if previous_type == TURN and state.type == SWATH:
                if i > 0:
                    tiara_path.append_annotation("zone_exit", "uturn", i - 1)
                tiara_path.append_annotation("zone_enter", "work", i)

            state.velocity *= state.dir
            tiara_path.append_point((state.point.getX(), state.point.getY(), state.velocity))

            previous_dir = state.dir
            previous_type = state.type

        tiara_path.append_annotation("zone_exit", "work", len(self.path.getStates()) - 1)

        tiara_path.save(filename)


@click.command()
@click.argument("kml_filename", required=True, type=click.Path(readable=True))
@click.option("-w", "--operation-width", default=1.58, type=click.FLOAT)
@click.option("-r", "--min-radius", default=3.5, type=click.FLOAT)
@click.option("-o", "--output", default="out.traj", type=click.Path(writable=True))
@click.option("--robot-width", default=None, type=click.FLOAT)
def main(kml_filename, operation_width, min_radius, output, robot_width):
    if robot_width is None:
        robot_width = operation_width

    pg = PathGenerator(robot_width, operation_width, min_radius)
    pg.load_kml(kml_filename)
    pg.generate_swaths()
    pg.path_planning()
    # pg.visualize()
    pg.export_path(output)


if __name__ == "__main__":
    main()
